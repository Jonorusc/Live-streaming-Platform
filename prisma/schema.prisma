// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum GAMES_CATEGORIES {
  ACTION
  ADVENTURE
  CASUAL
  INDIE
  MULTIPLAYER
  RACING
  RPG
  SIMULATION
  SPORTS
  STRATEGY
}

model User {
  id                      String             @id @default(auto()) @map("_id") @db.ObjectId
  firebase_id             String             @unique
  email                   String             @unique
  username                String             @unique
  username_updated_at     DateTime?
  profile                 Profile?
  channel                 Channel?
  follows                 Follower[]
  subscriptions           Subscriber[]
  interested_categories   GAMES_CATEGORIES[]
  uninterested_categories GAMES_CATEGORIES[]
  email_verified          Boolean            @default(false)
  deactivated             Boolean            @default(false)
  last_login              DateTime           @default(now())
  created_at              DateTime           @default(now())
  updated_at              DateTime           @updatedAt
}

model Profile {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String   @unique @db.ObjectId
  avatar     String
  color      String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Channel {
  id                   String             @id @default(auto()) @map("_id") @db.ObjectId
  name                 String             @unique
  owner                User               @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId              String             @unique @db.ObjectId
  followers            Follower[]
  subscribers          Subscriber[]
  description          String?
  categories           GAMES_CATEGORIES[]
  stream_key           String?
  stream_server_url    String?
  stream_ingress_id    String?            @unique
  streaming_title      String?
  streaming_thumbnail  String?
  streaming_game       String?
  streaming_viewers    Int?
  streaming_started_at DateTime?
  streaming_ended_at   DateTime?
  streaming_category   GAMES_CATEGORIES?
  live                 Boolean            @default(false)
  created_at           DateTime           @default(now())
  updated_at           DateTime           @updatedAt
}

enum FOLLOWER_ROLE {
  VIEWER
  STREAMER
  MODERATOR
}

enum FOLLOWER_RANK {
  NEW
  REGULAR
  ENTHUSIAST
  FAN
  SUPER_FAN
}

model Follower {
  id         String        @id @default(auto()) @map("_id") @db.ObjectId
  role       FOLLOWER_ROLE @default(VIEWER)
  rank       FOLLOWER_RANK @default(NEW)
  user       User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String        @db.ObjectId
  channel    Channel       @relation(fields: [channelId], references: [id], onDelete: Cascade)
  channelId  String        @db.ObjectId
  created_at DateTime      @default(now())
  updated_at DateTime      @updatedAt
}

// enum SubscriberTier {
//   TIER_1
//   TIER_2
//   TIER_3
// }

model Subscriber {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  // subTier   SubscriberTier @default(TIER_1)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String   @db.ObjectId
  channel    Channel  @relation(fields: [channelId], references: [id], onDelete: Cascade)
  channelId  String   @db.ObjectId
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}
